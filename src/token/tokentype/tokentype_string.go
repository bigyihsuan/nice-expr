// Code generated by "stringer -type=TokenType"; DO NOT EDIT.

package tokentype

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Invalid - -1]
	_ = x[EOF-0]
	_ = x[Integer-1]
	_ = x[Floating-2]
	_ = x[String-3]
	_ = x[LeftBracket-4]
	_ = x[RightBracket-5]
	_ = x[LeftBrace-6]
	_ = x[RightBrace-7]
	_ = x[LeftParen-8]
	_ = x[RightParen-9]
	_ = x[LeftTriangle-10]
	_ = x[RightTriangle-11]
	_ = x[Plus-12]
	_ = x[Minus-13]
	_ = x[Star-14]
	_ = x[Slash-15]
	_ = x[Percent-16]
	_ = x[PlusEqual-17]
	_ = x[MinusEqual-18]
	_ = x[StarEqual-19]
	_ = x[SlashEqual-20]
	_ = x[PercentEqual-21]
	_ = x[Equal-22]
	_ = x[Greater-23]
	_ = x[GreaterEqual-24]
	_ = x[Less-25]
	_ = x[LessEqual-26]
	_ = x[And-27]
	_ = x[Or-28]
	_ = x[Not-29]
	_ = x[Identifier-30]
	_ = x[Comma-31]
	_ = x[Colon-32]
	_ = x[Semicolon-33]
	_ = x[Underscore-34]
	_ = x[Var-35]
	_ = x[Const-36]
	_ = x[Set-37]
	_ = x[Is-38]
	_ = x[For-39]
	_ = x[Break-40]
	_ = x[Return-41]
	_ = x[Func-42]
	_ = x[If-43]
	_ = x[Else-44]
	_ = x[None-45]
	_ = x[Int-46]
	_ = x[Dec-47]
	_ = x[Str-48]
	_ = x[Bool-49]
	_ = x[List-50]
	_ = x[Map-51]
	_ = x[True-52]
	_ = x[False-53]
}

const _TokenType_name = "InvalidEOFIntegerFloatingStringLeftBracketRightBracketLeftBraceRightBraceLeftParenRightParenLeftTriangleRightTrianglePlusMinusStarSlashPercentPlusEqualMinusEqualStarEqualSlashEqualPercentEqualEqualGreaterGreaterEqualLessLessEqualAndOrNotIdentifierCommaColonSemicolonUnderscoreVarConstSetIsForBreakReturnFuncIfElseNoneIntDecStrBoolListMapTrueFalse"

var _TokenType_index = [...]uint16{0, 7, 10, 17, 25, 31, 42, 54, 63, 73, 82, 92, 104, 117, 121, 126, 130, 135, 142, 151, 161, 170, 180, 192, 197, 204, 216, 220, 229, 232, 234, 237, 247, 252, 257, 266, 276, 279, 284, 287, 289, 292, 297, 303, 307, 309, 313, 317, 320, 323, 326, 330, 334, 337, 341, 346}

func (i TokenType) String() string {
	i -= -1
	if i < 0 || i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i+-1), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
