program     ::= statement*
statement   ::= (expr | return) ";" ;
expr        ::= test | varDecl | constDecl | assignment | parenExpr | indexing | block;
parenExpr   ::= "(" expr ")" ;
indexing    ::= expr "_" expr ;
funcCall    ::= identifier "(" exprList ")" ;
exprList    ::= (expr ",")* (expr ","?)?;
varDecl     ::= "var" identifier "is" type expr ;
constDecl   ::= "const" identifier "is" type expr ;
assignment  ::= "set" identifier "is" expr ;

# block-related
block  ::= "{" statement* "}" ;
return ::= "return" expr? ;
break  ::= "break" expr? ;
if     ::= "if" expr "then" block ("else" (if | block))? ;
for    ::= "for" exprList block ;
# functions
function ::= func "(" argList ")" type block ;
argList  ::= (ident type ",")* (ident type ","?)? ;

# values
test       ::= notTest | test ("and"|"or") test ;
notTest    ::= comparison | "not" notTest ;
comparison ::= addExpr (("<"|">"|"<="|">="|"=") addExpr)* ;
# arthmetic
addExpr        ::= mulExpr | addExpr ("+"|"-") addExpr ;
mulExpr        ::= unaryMinusExpr | mulExpr ("*"|"/"|"%") mulExpr ;
unaryMinusExpr ::= "-" unaryMinusExpr | expr ;
primary        ::= literal | identifier | funcCall ;

literal     ::= primitive | compound ;
compound    ::= listLiteral | mapLiteral ;
listLiteral ::= "[" listItem* (expr ","?)? "]" ;
mapLiteral  ::= "<|" mapItem* (expr ":" expr ","?)? "|>" ;
listItem    ::= expr "," ;
mapItem     ::= expr ":" expr "," ;
primitive   ::= "INT" | "FLOAT" | "STRING" ;

type          ::= primitiveType | compoundType | funcType ;
funcType      ::= "func" "(" typeList* ")" type? ;
typeList      ::= type "," ;
compoundType  ::= listType | mapType ;
listType      ::= "list" "[" type "]" ;
mapType       ::= "map" "[" type "]" type ;
primitiveType ::= "int" | "dec" | "str" ;