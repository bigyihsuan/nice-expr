program     ::= statement*
statement   ::= expr ";" ;
expr        ::= test | varDecl | constDecl | assignment | parenExpr | indexing ;
parenExpr   ::= "(" expr ")" ;
indexing    ::= expr "_" expr ;
funcCall    ::= identifier "(" exprList ")" ;
exprList    ::= (expr ",")* ;
varDecl     ::= "var" identifier "is" type expr ;
constDecl   ::= "const" identifier "is" type expr ;
assignment  ::= "set" identifier "is" expr ;

# test       ::= orTest ;
# orTest     ::= andTest    | orTest "or" orTest ;
# andTest    ::= notTest    | andTest "and" andTest ;
test           ::= notTest    | test ("and"|"or") test ;
notTest        ::= comparison | "not" notTest ;
comparison     ::= addExpr (("<"|">"|"<="|">="|"=") addExpr)* ;
addExpr        ::= mulExpr        | addExpr ("+"|"-") addExpr ;
mulExpr        ::= unaryMinusExpr | mulExpr ("*"|"/"|"%") mulExpr ;
unaryMinusExpr ::= primary | "-" unaryMinusExpr | expr ;
primary        ::= literal | identifier | funcCall ;

literal     ::= primitive | compound ;
compound    ::= listLiteral | mapLiteral ;
listLiteral ::= "[" listItem* "]" ;
mapLiteral  ::= "<|" mapItem* "|>" ;
listItem    ::= expr "," ;
mapItem     ::= expr ":" expr "," ;
primitive   ::= "INT" | "FLOAT" | "STRING"

type          ::= primitiveType | compoundType | funcType ;
funcType      ::= "func" "(" typeList* ")" type?
typeList      ::= type ","
compoundType  ::= listType | mapType ;
listType      ::= "list" "[" type "]"
mapType       ::= "map" "[" type "]" type ;
primitiveType ::= "int" | "dec" | "str" ;