// Code generated by "stringer -type=TokenType"; DO NOT EDIT.

package tokentype

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Invalid-0]
	_ = x[EOF-1]
	_ = x[Integer-2]
	_ = x[Floating-3]
	_ = x[String-4]
	_ = x[LeftBracket-5]
	_ = x[RightBracket-6]
	_ = x[LeftBrace-7]
	_ = x[RightBrace-8]
	_ = x[LeftParen-9]
	_ = x[RightParen-10]
	_ = x[LeftTriangle-11]
	_ = x[RightTriangle-12]
	_ = x[Plus-13]
	_ = x[Minus-14]
	_ = x[Star-15]
	_ = x[Slash-16]
	_ = x[Percent-17]
	_ = x[PlusEqual-18]
	_ = x[MinusEqual-19]
	_ = x[StarEqual-20]
	_ = x[SlashEqual-21]
	_ = x[PercentEqual-22]
	_ = x[Equal-23]
	_ = x[Greater-24]
	_ = x[GreaterEqual-25]
	_ = x[Less-26]
	_ = x[LessEqual-27]
	_ = x[And-28]
	_ = x[Or-29]
	_ = x[Not-30]
	_ = x[Identifier-31]
	_ = x[Comma-32]
	_ = x[Colon-33]
	_ = x[Semicolon-34]
	_ = x[Underscore-35]
	_ = x[Var-36]
	_ = x[Const-37]
	_ = x[Set-38]
	_ = x[Is-39]
	_ = x[For-40]
	_ = x[Break-41]
	_ = x[Return-42]
	_ = x[Func-43]
	_ = x[If-44]
	_ = x[Else-45]
	_ = x[None-46]
	_ = x[Int-47]
	_ = x[Dec-48]
	_ = x[Str-49]
	_ = x[Bool-50]
	_ = x[List-51]
	_ = x[Map-52]
	_ = x[True-53]
	_ = x[False-54]
}

const _TokenType_name = "InvalidEOFIntegerFloatingStringLeftBracketRightBracketLeftBraceRightBraceLeftParenRightParenLeftTriangleRightTrianglePlusMinusStarSlashPercentPlusEqualMinusEqualStarEqualSlashEqualPercentEqualEqualGreaterGreaterEqualLessLessEqualAndOrNotIdentifierCommaColonSemicolonUnderscoreVarConstSetIsForBreakReturnFuncIfElseNoneIntDecStrBoolListMapTrueFalse"

var _TokenType_index = [...]uint16{0, 7, 10, 17, 25, 31, 42, 54, 63, 73, 82, 92, 104, 117, 121, 126, 130, 135, 142, 151, 161, 170, 180, 192, 197, 204, 216, 220, 229, 232, 234, 237, 247, 252, 257, 266, 276, 279, 284, 287, 289, 292, 297, 303, 307, 309, 313, 317, 320, 323, 326, 330, 334, 337, 341, 346}

func (i TokenType) String() string {
	if i < 0 || i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
