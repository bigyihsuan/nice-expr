// Code generated by "stringer -type=TokenType"; DO NOT EDIT.

package lexer

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Invalid - -1]
	_ = x[Integer-0]
	_ = x[Float-1]
	_ = x[String-2]
	_ = x[LeftBracket-3]
	_ = x[RightBracket-4]
	_ = x[LeftBrace-5]
	_ = x[RightBrace-6]
	_ = x[LeftParen-7]
	_ = x[RightParen-8]
	_ = x[Plus-9]
	_ = x[Minus-10]
	_ = x[Star-11]
	_ = x[Slash-12]
	_ = x[Equal-13]
	_ = x[PlusEqual-14]
	_ = x[MinusEqual-15]
	_ = x[StarEqual-16]
	_ = x[SlashEqual-17]
	_ = x[Comma-18]
	_ = x[Identifier-19]
	_ = x[Var-20]
	_ = x[Is-21]
	_ = x[For-22]
	_ = x[Break-23]
	_ = x[Return-24]
	_ = x[Func-25]
}

const _TokenType_name = "InvalidIntegerFloatStringLeftBracketRightBracketLeftBraceRightBraceLeftParenRightParenPlusMinusStarSlashEqualPlusEqualMinusEqualStarEqualSlashEqualCommaIdentifierVarIsForBreakReturnFunc"

var _TokenType_index = [...]uint8{0, 7, 14, 19, 25, 36, 48, 57, 67, 76, 86, 90, 95, 99, 104, 109, 118, 128, 137, 147, 152, 162, 165, 167, 170, 175, 181, 185}

func (i TokenType) String() string {
	i -= -1
	if i < 0 || i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i+-1), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
